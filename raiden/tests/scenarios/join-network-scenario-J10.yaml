settings:
  ## Gas price to use, either `fast`, `medium` or an integer (in gwei)
  gas_price: "fast"

  ## Protocol to use to connect to the Raiden nodes, default: "http"
  #protocol: "https"

token:
  ## To re-use an existing token give an address
  ## address: "0xFf8C8AD77E0F8b566F9732C4Cf5A47112d872fc0"

  ## To deploy a new one remove the `address` key
  ## Optionally parameters:give name and symbol, both will be autogenerated if not given
  ## name - Token name, default: autogenerated
  ## symbol - Token symbol, default: autogenerated
  ## decimals - Token decimals, default: 0
  ## balance_min - Minimum node balance, default: 5000
  #name: "Some token"
  #symbol: "STKN"
  #decimals: 18
  #balance_min: 50000000


nodes:
  commands:
    #start: "docker start raiden_{:02d}"
    #stop: "docker stop raiden_{:02d}"
    #kill: "docker kill raiden_{:02d}"
    stop: "pkill -f '127.0.0.1:50{:02d}'"
    kill: "pkill -9 -f '127.0.0.1:50{:02d}'"
    start: "raiden --config-file raiden_{0:02d}.toml --api-address 127.0.0.1:50{0:02d}"
  range:
    first: 1
    last: 4
    template: "localhost:50{:02d}"
  ## Alternatively give an explicit list:
  #list:
  #  - node1
  #  - node2
  #  - node3

## Available task types:
## - serial
## - parallel
## - open_channel
## - close_channel
## - deposit
## - transfer
## - stop_node
## - kill_node
## - start_node
## - assert
## - wait
## - join_network
## - leave_network

scenario:
  serial:
    tasks:
      - parallel:
          name: "Setting up a network"
          tasks:
            - open_channel: {from: 0, to: 1, total_deposit: 10, expected_http_status: 201}
            - open_channel: {from: 0, to: 2, total_deposit: 10, expected_http_status: 201}
            - open_channel: {from: 1, to: 2, total_deposit: 10, expected_http_status: 201}

      - serial:
          name: "Checking the network"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 10, balance: 10, state: "opened"}
            - assert: {from: 0, to: 2, total_deposit: 10, balance: 10, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 10, balance: 10, state: "opened"}

      - serial:
          name: "Node Nr. 4 joins a network with 100 funds and joinable_funds_target set to 0.6 and initial_channel_target set to 6"
          tasks:
            - join_network: {from: 3, funds: 100, initial_channel_target: 6, joinable_funds_target: 0.6, expected_http_status: 204} # When initial_channel_target > participants channel manager opens as many channels as possible and allocated funds as requested
            - assert: {from: 3, to: 0, total_deposit: 10, balance: 10, state: "opened"}
            - assert: {from: 3, to: 1, total_deposit: 10, balance: 10, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 10, balance: 10, state: "opened"}
